name: Build and Release [Manual]
on:
  workflow_dispatch:
    inputs:
      CREATE_TAG:
        type: boolean
        default: false
        description: Create New Tag
      RELEASE_VERSION:
        description: 'Release Version (Tag Name)'
        required: true

env:
  RELEASE_NAME: PIMSV2
  RELEASE_FILE: pimsv2
  BUILD_TYPE: PRD

jobs:

  create-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Echo inputs
        run: |
          echo "Create Git Tag ? ${{github.event.inputs.CREATE_TAG}}"
          echo "Create PIMS Release ${{github.event.inputs.RELEASE_VERSION}}"
      - name: Checkout code
        if: ${{ github.event.inputs.CREATE_TAG == 'true' }}
        uses: actions/checkout@v3
      - name: Create tag
        if: ${{ github.event.inputs.CREATE_TAG == 'true' }}
        uses: rickstaa/action-create-tag@v1
        with:
          tag: ${{github.event.inputs.RELEASE_VERSION}}
          message: "Tag for PIMS Release ${{github.event.inputs.RELEASE_VERSION}}"

  build-test:
    name: Build x Test [Branch ${GITHUB_REF##*/}]
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{github.event.inputs.RELEASE_VERSION}}

      # Fix timestamps
      - name: Restore timestamps for source code
        uses: chetan/git-restore-mtime-action@v1

      - name: Archive site content
        uses: thedoctor0/zip-release@master
        with:
          filename: release.zip
          exclusions: '*.git* /*node_modules/* .editorconfig /*storage/*'

      - name: Upload site content
        uses: actions/upload-artifact@v2
        with:
          name: site-build
          path: release.zip
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Download site content
        uses: actions/download-artifact@v2
        with:
          name: site-build

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: Get current datetime
        id: datetime
        run: echo "::set-output name=datetime::$(date +'%Y-%m-%d %H:%M:%S')"

      - name: Check release version input
        id: prerelease
        run: |
          if ! [[ ${{ github.event.inputs.RELEASE_VERSION }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo ::set-output name=prerelease::true
          fi

      - name: add add version to release
        env:
          VERSION_INFO: version-info.ini
        run: |
          echo "[Build]" > ${{env.VERSION_INFO}}
          echo "release_version = ${{github.event.inputs.RELEASE_VERSION}}" >> ${{env.VERSION_INFO}}
          if ! [[ ${{ github.event.inputs.RELEASE_VERSION }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "release_type = pre-release" >> ${{env.VERSION_INFO}}
          fi
          echo "build_version = ${{github.event.inputs.RELEASE_VERSION}}+${GITHUB_SHA::8}" >> ${{env.VERSION_INFO}}
          echo "build_id = ${GITHUB_SHA}" >> ${{env.VERSION_INFO}}
          echo "build_date = ${{steps.datetime.outputs.datetime}}" >> ${{env.VERSION_INFO}}
          zip ./release.zip ${{env.VERSION_INFO}}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{github.event.inputs.RELEASE_VERSION}}
          prerelease: ${{steps.prerelease.outputs.prerelease}}
          tag_name: ${{github.event.inputs.RELEASE_VERSION}}
          generate_release_notes: true
          body: 'my manual release body!'
          body_path: version-info.ini
          files: |
            release.zip
            version-info.ini

#github:
#  event:
#    inputs:#      - name: Create GitHub release
#        id: create-new-release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          release_name: ${{env.BUILD_TYPE}} ${{steps.date.outputs.date}}_${{github.run_number}}
#          tag_name: ${{env.BUILD_TYPE}}_${{steps.date.outputs.date}}_${{github.run_number}}
#          draft: true
#          prerelease: true
#      - name: Upload asset to GitHub release
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create-new-release.outputs.upload_url}}
#          asset_path: ./release.zip
#          asset_name: ${{env.RELEASE_FILE}}.zip
#          asset_content_type: application/zip
